import 'package:flutter/material.dart';
import '../../models/Equipment.dart';
import '../../ApiHandler.dart';
import 'package:intl/intl.dart';

class CreateEquipmentPage extends StatefulWidget {
  @override
  _CreateEquipmentPageState createState() => _CreateEquipmentPageState();
}

class _CreateEquipmentPageState extends State<CreateEquipmentPage> {
  final _formKey = GlobalKey<FormState>();
  String name = '';
  String category = '';
  int quantity = 0;
  DateTime? lastScanDate;
  DateTime? nextScanDate;

  // Create a TextEditingController for each date field
  final TextEditingController _lastScanDateController = TextEditingController();
  final TextEditingController _nextScanDateController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.blueGrey[800],
        title: Text('Add New Equipment', style: TextStyle(color: Colors.white, fontSize: 24, fontWeight: FontWeight.bold)),
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: <Widget>[
              buildTextField('Name', onChanged: (value) => name = value),
              buildTextField('Category', onChanged: (value) => category = value),
              buildTextField('Quantity', onChanged: (value) => quantity = int.parse(value), keyboardType: TextInputType.number),
              buildDateField(context, 'Last Scan Date', _lastScanDateController, (date) {
                lastScanDate = date;
                _lastScanDateController.text = DateFormat('yyyy-MM-dd').format(date);
              }),
              buildDateField(context, 'Next Scan Date', _nextScanDateController, (date) {
                nextScanDate = date;
                _nextScanDateController.text = DateFormat('yyyy-MM-dd').format(date);
              }),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _submitForm,
                child: Text('Save Equipment'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget buildTextField(String label, {required Function(String) onChanged, bool obscureText = false, TextInputType keyboardType = TextInputType.text}) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 15),
      child: TextFormField(
        decoration: InputDecoration(
          labelText: label,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(25.0),
          ),
          filled: true,
          fillColor: Colors.grey[200],
        ),
        obscureText: obscureText,
        keyboardType: keyboardType,
        onChanged: onChanged,
      ),
    );
  }

  Widget buildDateField(BuildContext context, String label, TextEditingController controller, Function(DateTime) onChanged) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 15),
      child: TextFormField(
        controller: controller,
        decoration: InputDecoration(
          labelText: label,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(25.0),
          ),
          filled: true,
          fillColor: Colors.grey[200],
          suffixIcon: Icon(Icons.calendar_today),
        ),
        readOnly: true, // Make the text field read-only
        onTap: () async {
          FocusScope.of(context).requestFocus(FocusNode());
          DateTime? pickedDate = await showDatePicker(
            context: context,
            initialDate: DateTime.now(),
            firstDate: DateTime(1900),
            lastDate: DateTime(2100),
          );
          if (pickedDate != null) {
            onChanged(pickedDate);
          }
        },
      ),
    );
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      Equipment newEquipment = Equipment(
        id: 0, // ID is autogenerated
        name: name,
        quantity: quantity,
        category: category,
        lastScanDate: lastScanDate,
        nextScanDate: nextScanDate,
      );

      try {
        bool result = await ApiHandler().createEquipment(newEquipment);
        if (result) {
          Navigator.pop(context, newEquipment); // Indicate success
        } else {
          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Failed to create equipment')));
        }
      } catch (e) {
        print('Error creating equipment: $e');
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error creating equipment: $e')));
      }
    }
  }
}
